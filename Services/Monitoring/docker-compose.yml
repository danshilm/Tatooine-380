version: "3.7"

networks:
  web:
    external: true
  proxy:
    external: true
  monitorss:
    name: monitorss
    internal: true
  grafana:
    name: grafana
    internal: true

services:
  # netdata:
  #   image: netdata/netdata
  #   hostname: netdata
  #   container_name: netdata
  #   security_opt:
  #     - apparmor:unconfined
  #   cap_add:
  #     - SYS_PTRACE
  #     - SYS_ADMIN
  #   depends_on:
  #     - dockerproxy
  #   networks:
  #     - proxy
  #     - web
  #   ports:
  #     - 19999:19999
  #     - 4242:4242 #for opentsdb backend
  #   volumes:
  #     - /etc/passwd:/host/etc/passwd:ro
  #     - /etc/group:/host/etc/group:ro
  #     - /proc:/host/proc:ro
  #     - /sys:/host/sys:ro
  #     - /etc/os-release:/host/etc/os-release:ro
  #     - /var/log/smartd:/var/log/smartd
  #     - ${USERDIR}/Services/Monitoring/netdata/config/netdata.conf:/etc/netdata/netdata.conf
  #     - ${USERDIR}/Services/Monitoring/netdata/config/traefik.conf:/etc/netdata/python.d/traefik.conf
  #     - ${USERDIR}/Services/Monitoring/netdata/config/smartd_log.conf:/etc/netdata/python.d/smartd_log.conf
  #   environment:
  #     - DOCKER_HOST=dockerproxy:2375
  #     - TZ=${TZ}
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #   labels:
  #     - "traefik.enable=true"
  #     ## HTTP Routers
  #     - "traefik.http.routers.netdata-rtr.entrypoints=https"
  #     - "traefik.http.routers.netdata-rtr.rule=Host(`netdata.${DOMAINNAME}`)"
  #     - "traefik.http.routers.netdata-rtr.tls=true"
  #     ## Middlewares
  #     - "traefik.http.routers.netdata-rtr.middlewares=chain-authelia@file"
  #     ## HTTP Services
  #     - "traefik.http.routers.netdata-rtr.service=netdata-svc"
  #     - "traefik.http.services.netdata-svc.loadbalancer.server.port=19999"
  #   restart: unless-stopped

  grafana:
    image: grafana/grafana
    container_name: grafana
    hostname: grafana
    user: ${PUID}:{PGID}
    security_opt:
      - no-new-privileges:true
    depends_on:
      - influxdb
      - varken
      - grafana-renderer
    networks:
      - web
      - grafana
    ports:
      - target: 3000
        published: 3100
        protocol: tcp
        mode: host
    volumes:
      - ${USERDIR}/Services/Monitoring/grafana/:/config
    environment:
      - GF_PATHS_DATA=/config/data
      - GF_PATHS_LOGS=/config/logs
      - GF_PATHS_PLUGINS=/config/plugins
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
      - GF_RENDERING_SERVER_URL=http://grafana-renderer:8081/render
      - GF_RENDERING_CALLBACK_URL=http://grafana:3000/
      - GF_LOG_FILTERS=rendering:debug
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.grafana-rtr.entrypoints=https"
      - "traefik.http.routers.grafana-rtr.rule=Host(`grafana.${DOMAINNAME}`)"
      - "traefik.http.routers.grafana-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.grafana-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.grafana-rtr.service=grafana-svc"
      - "traefik.http.services.grafana-svc.loadbalancer.server.port=3000"
    healthcheck:
      test: wget -qO - http://localhost:3000/api/health | grep "ok" || exit 1
      interval: 60s
      timeout: 10s
      retries: 15
      start_period: 20s
    restart: unless-stopped

  grafana-renderer:
    image: grafana/grafana-image-renderer:latest
    container_name: grafana-renderer
    hostname: grafana-renderer
    security_opt:
      - no-new-privileges:true
    networks:
      - grafana

  # prometheus:
  #   image: prom/prometheus
  #   container_name: prometheus
  #   hostname: prometheus
  #   user: "65534"
  #   security_opt:
  #     - no-new-privileges:true
  #   networks:
  #     - web
  #   ports:
  #     - target: 9090
  #       published: 9190
  #       protocol: tcp
  #       mode: host
  #   volumes:
  #     - ${USERDIR}/Services/Monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
  #   labels:
  #     - "traefik.enable=true"
  #     ## HTTP Routers
  #     - "traefik.http.routers.prometheus-rtr.entrypoints=https"
  #     - "traefik.http.routers.prometheus-rtr.rule=Host(`prometheus.${DOMAINNAME}`)"
  #     - "traefik.http.routers.prometheus-rtr.tls=true"
  #     ## Middlewares
  #     - "traefik.http.routers.prometheus-rtr.middlewares=chain-authelia@file"
  #     ## HTTP Services
  #     - "traefik.http.routers.prometheus-rtr.service=prometheus-svc"
  #     - "traefik.http.services.prometheus-svc.loadbalancer.server.port=9090"
  #   restart: unless-stopped

  influxdb:
    image: influxdb
    container_name: influxdb
    hostname: influxdb
    security_opt:
      - no-new-privileges:true
    networks:
      - web
    ports:
      - target: 8086
        published: 8086
        protocol: tcp
        mode: host
      - target: 4242 # for opentsdb to be able to get metrics from netdata
        published: 4242
        protocol: tcp
        mode: host
    volumes:
      - ${USERDIR}/Services/Monitoring/influxdb/lib:/var/lib/influxdb
      - ${USERDIR}/Services/Monitoring/influxdb/influxdb.conf:/etc/influxdb/influxdb.conf:ro
    restart: unless-stopped

  varken:
    hostname: varken
    container_name: varken
    image: boerderij/varken
    # user: {PUID}:{PGID}
    security_opt:
      - no-new-privileges:true
    depends_on:
      - influxdb
    networks:
      - web
    volumes:
      - ${USERDIR}/Services/Monitoring/varken/:/config
    environment:
      - TZ=${TZ}
    restart: unless-stopped

  speedtest:
    image: barrycarey/speedtest-for-influxdb-and-grafana
    container_name: speedtest
    hostname: speedtest
    security_opt:
      - no-new-privileges:true
    depends_on:
      - influxdb
    networks:
      - web
    volumes:
      - ${USERDIR}/Services/Monitoring/speedtest/config.ini:/src/config.ini
    restart: unless-stopped

  dozzle:
    image: amir20/dozzle
    container_name: dozzle
    hostname: dozzle
    security_opt:
      - no-new-privileges:true
    networks:
      - web
      - proxy
    ports:
      - target: 8080
        published: 8280
        protocol: tcp
        mode: host
    environment:
      - DOCKER_HOST=tcp://dockerproxy:2375
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.dozzle-rtr.entrypoints=https"
      - "traefik.http.routers.dozzle-rtr.rule=Host(`dozzle.${DOMAINNAME}`)"
      - "traefik.http.routers.dozzle-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.dozzle-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.dozzle-rtr.service=dozzle-svc"
      - "traefik.http.services.dozzle-svc.loadbalancer.server.port=8080"
    healthcheck:
      test: [ "CMD", "/dozzle", "healthcheck" ]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  scrutiny:
    image: analogj/scrutiny
    container_name: scrutiny
    hostname: scrutiny
    security_opt:
      - no-new-privileges:true
    cap_add:
      - SYS_RAWIO
    networks:
      - web
    ports:
      - target: 8080
        published: 8580
        protocol: tcp
        mode: host
    volumes:
      - /run/udev:/run/udev:ro
    devices:
      - /dev/sda
      - /dev/sdb
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    restart: unless-stopped

  mrss-redis:
    image: redis:alpine
    container_name: mrss-redis
    networks:
      - monitorss
    restart: unless-stopped

  mrss-mongo:
    image: mongo:4.4
    container_name: mrss-mongo
    command: mongod --port 27017
    networks:
      - monitorss
    volumes:
      - ${USERDIR}/Services/Monitoring/monitorss/db:/data/db
    restart: unless-stopped

  mrss-bot:
    image: synzen/monitorss
    container_name: mrss-bot
    depends_on:
      - mrss-mongo
    networks:
      - monitorss
      - web
    environment:
      DRSS_START: bot
      DRSS_BOT_TOKEN: ${MONITORSS_BOT_TOKEN:?MonitoRSS bot token not set}
      DRSS_DATABASE_URI: mongodb://mrss-mongo:27017/rss
    restart: unless-stopped

  mrss-web:
    image: synzen/monitorss
    container_name: mrss-web
    depends_on:
      - mrss-redis
      - mrss-mongo
    networks:
      - monitorss
      - web
    environment:
      DRSS_START: web
      DRSSWEB_BOT_TOKEN: ${MONITORSS_BOT_TOKEN:?MonitoRSS bot token not set}
      DRSSWEB_DATABASE_REDIS: redis://mrss-redis:6379
      DRSSWEB_DATABASE_URI: mongodb://mrss-mongo:27017/rss
      DRSSWEB_BOT_REDIRECTURI: https://monitorss.${DOMAINNAME}/authorize
      DRSSWEB_BOT_CLIENTID: ${MONITORSS_BOT_CLIENTID:?MonitoRSS bot client id not set}
      DRSSWEB_BOT_CLIENTSECRET: ${MONITORSS_BOT_CLIENTSECRET:?MonitoRSS bot client secret not set}
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.monitorss-rtr.entrypoints=https"
      - "traefik.http.routers.monitorss-rtr.rule=Host(`monitorss.${DOMAINNAME}`)"
      - "traefik.http.routers.monitorss-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.monitorss-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.monitorss-rtr.service=monitorss-svc"
      - "traefik.http.services.monitorss-svc.loadbalancer.server.port=8081"
    restart: unless-stopped
